date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference("2024-05-21", "2024-06-21", units = "weeks")
date_difference("2024-05-21", "2024-09-21", units = "months")
date_difference("2024-05-21", "2025-09-21", units = "years")
#' Calculate the time difference between two dates
#'
#' @param first_date First date in YYYY-MM-DD format.
#' @param second_date Second date in YYYY-MM-DD format.
#' @param units The unit of time difference. Options are "seconds", "minutes", "hours", "days", "weeks", "months", or "years".
#' @return Time difference between two dates in the specified unit.
#' @export
#'
#' @examples
#' date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference <- function(first_date, second_date, units = "x") {
# maak variabelen van de ingevoerde data
first <- as.Date(first_date)
second <- as.Date(second_date)
# bereken verschil op basis van de genoemde eenheid
if (units == "days") {
date_difference_days <- difftime(second, first, units = "days")
return(date_difference_days)
}
else if (units == "weeks") {
date_difference_weeks <- difftime(second, first, units = "weeks")
return(date_difference_weeks)
}
else if (units == "seconds") {
date_difference_seconds <- difftime(second, first, units = "secs")
return(date_difference_seconds)
}
else if (units == "minutes") {
date_difference_minutes <- difftime(second, first, units = "mins")
return(date_difference_minutes)
}
else if (units == "hours") {
date_difference_hours <- difftime(second, first, units = "hours")
return(date_difference_hours)
}
else if (units == "months") {
date_difference_months <- as.numeric(difftime(second, first, units = "days")) / 30.44 # gemiddelde dagen in een maand
return(paste("Time difference of", date_difference_months, "months"))
}
else if (units == "years") {
date_difference_years <- as.numeric(difftime(second, first, units = "days")) / 365.25 # rekening houden met schrikkeljaar
return(paste("Time difference of", date_difference_years, "years"))
}
else {
stop("Invalid unit. Please use 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', or 'years'.")
}
}
# Examples
date_difference("2024-05-21", "2024-05-22", units = "seconds")
date_difference("2024-05-21", "2024-05-22", units = "minutes")
date_difference("2024-05-21", "2024-05-22", units = "hours")
date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference("2024-05-21", "2024-06-21", units = "weeks")
date_difference("2024-05-21", "2024-09-21", units = "months")
date_difference("2024-05-21", "2025-09-21", units = "years")
}
)
date_difference("2024-05-21", "2025-09-21", units = "years")
#' @export
#'
#' @examples
#' date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference <- function(first_date, second_date, units = "days") {
# Convert dates to Date objects
first <- as.Date(first_date)
second <- as.Date(second_date)
# Check units and calculate the difference accordingly
if (units == "seconds") {
date_difference_seconds <- difftime(second, first, units = "secs")
return(date_difference_seconds)
} else if (units == "minutes") {
date_difference_minutes <- difftime(second, first, units = "mins")
return(date_difference_minutes)
} else if (units == "hours") {
date_difference_hours <- difftime(second, first, units = "hours")
return(date_difference_hours)
} else if (units == "days") {
date_difference_days <- difftime(second, first, units = "days")
return(date_difference_days)
} else if (units == "weeks") {
date_difference_weeks <- difftime(second, first, units = "weeks")
return(date_difference_weeks)
} else if (units == "months") {
date_difference_months <- as.numeric(difftime(second, first, units = "days")) / 30.44 # gemiddelde dagen in een maand
return(paste("Time difference of", date_difference_months, "months"))
} else if (units == "years") {
date_difference_years <- as.numeric(difftime(second, first, units = "days")) / 365.25 # rekening houden met schrikkeljaren
return(paste("Time difference of", date_difference_years, "years"))
} else {
stop("Invalid units specified. Please use 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', or 'years'.")
}
}
# Examples
print(date_difference("2024-05-21", "2024-05-22", units = "seconds"))
print(date_difference("2024-05-21", "2024-05-22", units = "minutes"))
print(date_difference("2024-05-21", "2024-05-22", units = "hours"))
print(date_difference("2024-05-21", "2024-05-22", units = "days"))
print(date_difference("2024-05-21", "2024-06-21", units = "weeks"))
print(date_difference("2024-05-21", "2024-09-21", units = "months"))
print(date_difference("2024-05-21", "2025-09-21", units = "years"))
#' Calculate the time difference between two dates
#'
#' @param first_date First date in YYYY-MM-DD format.
#' @param second_date Second date in YYYY-MM-DD format.
#' @param units The unit of time difference. Options are "seconds", "minutes", "hours", "days", "weeks", "months", or "years".
#' @return Time difference between two dates in the specified unit.
#' @export
#'
#' @examples
#' date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference <- function(first_date, second_date, units = "days") {
# Convert dates to Date objects
first <- as.Date(first_date)
second <- as.Date(second_date)
# Check units and calculate the difference accordingly
if (units == "seconds") {
date_difference_seconds <- difftime(second, first, units = "secs")
return(date_difference_seconds)
} else if (units == "minutes") {
date_difference_minutes <- difftime(second, first, units = "mins")
return(date_difference_minutes)
} else if (units == "hours") {
date_difference_hours <- difftime(second, first, units = "hours")
return(date_difference_hours)
} else if (units == "days") {
date_difference_days <- difftime(second, first, units = "days")
return(date_difference_days)
} else if (units == "weeks") {
date_difference_weeks <- difftime(second, first, units = "weeks")
return(date_difference_weeks)
} else if (units == "months") {
date_difference_months <- as.numeric(difftime(second, first, units = "days")) / 30.44 # gemiddelde dagen in een maand
return(paste("Time difference of", date_difference_months, "months"))
} else if (units == "years") {
date_difference_years <- as.numeric(difftime(second, first, units = "days")) / 365.25 # rekening houden met schrikkeljaren
return(paste("Time difference of", date_difference_years, "years"))
} else {
stop("Invalid units specified. Please use 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', or 'years'.")
}
}
# Examples
print(date_difference("2024-05-21", "2024-05-22", units = "seconds"))
print(date_difference("2024-05-21", "2024-05-22", units = "minutes"))
print(date_difference("2024-05-21", "2024-05-22", units = "hours"))
print(date_difference("2024-05-21", "2024-05-22", units = "days"))
print(date_difference("2024-05-21", "2024-06-21", units = "weeks"))
print(date_difference("2024-05-21", "2024-09-21", units = "months"))
print(date_difference("2024-05-21", "2025-09-21", units = "years"))
#' Calculate the time difference between two dates
#'
#' @param first_date First date in YYYY-MM-DD format.
#' @param second_date Second date in YYYY-MM-DD format.
#' @param units The unit of time difference. Options are "seconds", "minutes", "hours", "days", "weeks", "months", or "years".
#' @return Time difference between two dates in the filled in unit.
#' @export
#'
#' @examples
#' date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference <- function(first_date, second_date, units = "days") {
# Convert dates to Date objects
first <- as.Date(first_date)
second <- as.Date(second_date)
# Check units and calculate the difference accordingly
if (units == "seconds") {
date_difference_seconds <- difftime(second, first, units = "secs")
return(date_difference_seconds)
}
else if (units == "minutes") {
date_difference_minutes <- difftime(second, first, units = "mins")
return(date_difference_minutes)
}
else if (units == "hours") {
date_difference_hours <- difftime(second, first, units = "hours")
return(date_difference_hours)
}
else if (units == "days") {
date_difference_days <- difftime(second, first, units = "days")
return(date_difference_days)
}
else if (units == "weeks") {
date_difference_weeks <- difftime(second, first, units = "weeks")
return(date_difference_weeks)
}
else if (units == "months") {
date_difference_months <- as.numeric(difftime(second, first, units = "days")) / 30.44 # gemiddelde dagen in een maand
return(paste("Time difference of", date_difference_months, "months"))
}
else if (units == "years") {
date_difference_years <- as.numeric(difftime(second, first, units = "days")) / 365.25 # rekening houden met schrikkeljaren
return(paste("Time difference of", date_difference_years, "years"))
}
else {
stop("Invalid unit. Please use 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', or 'years'.")
}
}
# Examples
date_difference("2024-05-21", "2024-05-22", units = "seconds")
date_difference("2024-05-21", "2024-05-22", units = "minutes")
date_difference("2024-05-21", "2024-05-22", units = "hours")
date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference("2024-05-21", "2024-06-21", units = "weeks")
date_difference("2024-05-21", "2024-09-21", units = "months")
date_difference("2024-05-21", "2025-09-21", units = "years")
#' Calculate the time difference between two dates
#'
#' @param first_date First date in YYYY-MM-DD format.
#' @param second_date Second date in YYYY-MM-DD format.
#' @param units The unit of time difference. Options are "seconds", "minutes", "hours", "days", "weeks", "months", or "years".
#' @return Time difference between two dates in the filled in unit.
#' @export
#'
#' @examples
#' date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference <- function(first_date, second_date, units = "days") {
# Convert dates to Date objects
first <- as.Date(first_date)
second <- as.Date(second_date)
# Check units and calculate the difference accordingly
if (units == "seconds") {
date_difference_seconds <- difftime(second, first, units = "secs")
return(date_difference_seconds)
}
else if (units == "minutes") {
date_difference_minutes <- difftime(second, first, units = "mins")
return(date_difference_minutes)
}
else if (units == "hours") {
date_difference_hours <- difftime(second, first, units = "hours")
return(date_difference_hours)
}
else if (units == "days") {
date_difference_days <- difftime(second, first, units = "days")
return(date_difference_days)
}
else if (units == "weeks") {
date_difference_weeks <- difftime(second, first, units = "weeks")
return(date_difference_weeks)
}
else if (units == "months") {
date_difference_months <- as.numeric(difftime(second, first, units = "days")) / 30.44 # gemiddelde dagen in een maand
return(paste("Time difference of", date_difference_months, "months"))
}
else if (units == "years") {
date_difference_years <- as.numeric(difftime(second, first, units = "days")) / 365.25 # rekening houden met schrikkeljaren
return(paste("Time difference of", date_difference_years, "years"))
}
else {
stop("Invalid unit. Please use 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', or 'years'.")
}
}
# Examples
date_difference("2024-05-21", "2024-05-22", units = "seconds")
date_difference("2024-05-21", "2024-05-22", units = "minutes")
date_difference("2024-05-21", "2024-05-22", units = "hours")
date_difference("2024-05-21", "2024-05-22", units = "days")
date_difference("2024-05-21", "2024-06-21", units = "weeks")
date_difference("2024-05-21", "2024-09-21", units = "months")
date_difference("2024-05-21", "2025-09-21", units = "years")
?ggplot
?difftime
?date_difference
?date_difference
?date_difference
?difftime
?date_difference
?difftime
?date_difference
?date_difference
document()
document()
document()
load_all()
rm(list =
c("date_difference"))
load_all()
document()
document()
check()
install()
library(DateTime)
?date_difference
check()
?date_difference
library(devtools)
library(usethis)
library(devtools)
check()
document()
#' Check if two dates fall on the same day
#'
#' @param date1 The first date in YYYY-MM-DD format.
#' @param date2 The second date in YYYY-MM-DD format.
#' @return A list with the logical value indicating whether the dates fall on the same day, and if not, the days of the week on which they fall.
#' @export
#'
#' @examples
#' is_same_day("2024-05-21", "2024-05-21")
is_same_day <- function(date1, date2) {
date1 <- as.Date(date1)
date2 <- as.Date(date2)
same_day <- date1 == date2
if (same_day) {
day_of_week <- weekdays(date1)
return(same_day = same_day, day_of_week = day_of_week)
} else {
day_of_week_1 <- weekdays(date1)
day_of_week_2 <- weekdays(date2)
return(same_day = same_day, day_of_week_1 = day_of_week_1, day_of_week_2 = day_of_week_2)
}
}
is_same_day("2024-05-21", "2024-05-21")
#' Check if two dates fall on the same day
#'
#' @param date1 The first date in YYYY-MM-DD format.
#' @param date2 The second date in YYYY-MM-DD format.
#' @return A list with the logical value indicating whether the dates fall on the same day, and if not, the days of the week on which they fall.
#' @export
#'
#' @examples
#' is_same_day("2024-05-21", "2024-05-21")
is_same_day <- function(date1, date2) {
date1 <- as.Date(date1)
date2 <- as.Date(date2)
same_day <- date1 == date2
if (same_day) {
day_of_week <- weekdays(date1)
return(list(same_day = same_day, day_of_week = day_of_week))
} else {
day_of_week_1 <- weekdays(date1)
day_of_week_2 <- weekdays(date2)
return(list(same_day = same_day, day_of_week_1 = day_of_week_1, day_of_week_2 = day_of_week_2))
}
}
is_same_day("2024-05-21", "2024-05-21")
#' Check if two dates fall on the same day
#'
#' @param date1 The first date in YYYY-MM-DD format.
#' @param date2 The second date in YYYY-MM-DD format.
#' @return A list with the logical value telling whether the dates fall on the same day, and if not, the days of the week on which they fall.
#' @export
#'
#' @examples
#' is_same_day("2024-05-21", "2024-05-21")
is_same_day <- function(date1, date2) {
date1 <- as.Date(date1)
date2 <- as.Date(date2)
same_day <- date1 == date2
if (same_day) {
day_of_week <- weekdays(date1)
return(list(same_day = same_day, day_of_week = day_of_week))
} else {
day_of_week_1 <- weekdays(date1)
day_of_week_2 <- weekdays(date2)
return(list(same_day = same_day, day_of_week_1 = day_of_week_1, day_of_week_2 = day_of_week_2))
}
}
is_same_day("2024-05-04", "2024-02-02")
document()
check()
library(DateTime)
?DateTime
??DateTime
document()
load_all()
rm(list = c("is_same_day"))
load_all()
document()
check()
?is_same_day
load
load_all()
document()
check()
?is_same_day
load_all()
document()
check()
install.packages("lubridate")
library(lubridate)
document()
library(usethis)
library(devtools)
load_all()
document()
check()
library(lubridate)
check()
install.packages("lubridate")
install.packages("lubridate")
install.packages("datetime")
library(DateTime)
load_all()
document()
check()
load_all()
check()
document()
?add_time
library(lubridate)
month(1)
?months()
#' Check if a date is a holiday in the Netherlands
#'
#' @param date The date to check in YYYY-MM-DD format.
#' @return TRUE if the date is a holiday, FALSE otherwise.
#' @export
#'
#' @examples
#' is_holiday("2024-01-01")
#' is_holiday("2024-04-27")
#'
is_holiday <- function(date) {
# Alle (wettelijke) Nederlandse feestdagen
dutch_holidays <- c(
"01-01",    # New Year's Day
"03-29",    # Goede Vrijdag / Good Friday
"03-31",    # Easter
"04-01",    # Second Easter Day
"04-27",    # King's Day
"05-05",    # Liberation Day (every 5 years)
"05-09",    # Ascension Day
"05-19",    # Pentecost
"05-20",    # Second Pentecost
"12-25",    # Christmas Day
"12-26"     # Second Christmas Day
)
# Check if the date is a Dutch holiday
is_holiday <- month_day %in% dutch_holidays
return(is_holiday)
}
#' Check if a date is a holiday in the Netherlands
#'
#' @param date The date to check in YYYY-MM-DD format.
#' @return TRUE if the date is a holiday, FALSE otherwise.
#' @export
#'
#' @examples
#' is_holiday("2024-01-01")
#' is_holiday("2024-04-27")
#'
is_dutch_holiday <- function(date) {
# Alle (wettelijke) Nederlandse feestdagen
dutch_holidays <- c(
"01-01",    # New Year's Day
"03-29",    # Goede Vrijdag / Good Friday
"03-31",    # Easter
"04-01",    # Second Easter Day
"04-27",    # King's Day
"05-05",    # Liberation Day (every 5 years)
"05-09",    # Ascension Day
"05-19",    # Pentecost
"05-20",    # Second Pentecost
"12-25",    # Christmas Day
"12-26"     # Second Christmas Day
)
# Check if the date is a Dutch holiday
is_holiday <- month_day %in% dutch_holidays
return(is_dutch_holiday)
}
is_dutch_holiday(2024-12-25)
#' Check if a date is a holiday in the Netherlands
#'
#' @param date The date to check in YYYY-MM-DD format.
#' @return TRUE if the date is a holiday, FALSE otherwise.
#' @export
#'
#' @examples
#' is_holiday("2024-01-01")
#' is_holiday("2024-04-27")
#'
is_dutch_holiday <- function(date) {
# Alle (wettelijke) Nederlandse feestdagen
dutch_holidays <- c(
"01-01",    # New Year's Day
"03-29",    # Goede Vrijdag / Good Friday
"03-31",    # Easter
"04-01",    # Second Easter Day
"04-27",    # King's Day
"05-05",    # Liberation Day (every 5 years)
"05-09",    # Ascension Day
"05-19",    # Pentecost
"05-20",    # Second Pentecost
"12-25",    # Christmas Day
"12-26"     # Second Christmas Day
)
# Check if the date is a Dutch holiday
is_holiday <- format(as.Date(date), "%m-%d") %in% dutch_holidays
return(is_holiday)
}
is_dutch_holiday("2024-12-25")
load_all()
document()
check()
.Last.error
library(usethis)
library(devtools)
library(DateTime)
document()
rm(list = c("is_dutch_holiday"))
document()
check()
document()
check()
check()
browseVignettes()
browseVignettes("devtools")
usethis::use_vignette("DateTime-Vignette")
browseVignettes(package.rb)
